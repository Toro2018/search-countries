{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","nativeName","capitalCity","flag","code","react_default","a","createElement","className","style","verticalAlign","alt","src","CardList","countries","map","_ref2","alpha2Code","capital","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","_this$state","filteredCountries","filter","country","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c2a78db7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card=({name, nativeName, capitalCity, flag, code})=>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 w-20-ns' style={{verticalAlign: \"middle\"}}>\r\n\t\t\t<img alt='no flag available' src={flag}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h3>Code: {code}</h3>\r\n\t\t\t\t<p className=\"f1 f3-ns lh-copy measure\">Name: <strong>{nativeName}</strong></p>\r\n\t\t\t\t<p className=\"f2 f3-ns lh-copy measure\">English Name: {name}</p>\r\n\t\t\t\t<p>(Capital)City: {capitalCity}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({countries}) =>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tcountries.map( ({alpha2Code, name, nativeName, capital, flag})=>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={alpha2Code}\r\n\t\t\t\t\t\t\tcode = {alpha2Code}\r\n\t\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\t\tnativeName = {nativeName} \r\n\t\t\t\t\t\t\tcapitalCity={capital}\r\n\t\t\t\t\t\t\tflag = {flag}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n\t\treturn (\r\n\t\t\t<div className='pa2'>\r\n\t\t\t\t<input \r\n\t\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\t\ttype='search' \r\n\t\t\t\t\tplaceholder='search countries'\r\n\t\t\t\t\tonChange={searchChange}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n\tconsole.log(props);\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '750px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\tcountries:[],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://restcountries.eu/rest/v2/all')\r\n\t\t.then( response=> response.json() )\r\n\t\t.then(countries=>{ \r\n\t\t\tthis.setState({countries}) \r\n\t\t})\r\n\t}\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield:event.target.value})\r\n\t\t\t\t}\r\n\r\n\trender(){\r\n\t\t\t\tconst{countries,searchfield}=this.state;\r\n\t\t\t\tconst filteredCountries =countries.filter( country=>\r\n\t\t\t\t\t\t country.name.toLowerCase().includes( searchfield.toLowerCase() )\r\n\t\t\t\t\t)\r\n\t\t\t\t\r\n\t\t\t\treturn !countries.length?\r\n\t\t\t\t<h1>Loading</h1>:\r\n\t\t\t\t(\r\n\t \t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='f2'>Please search for the country and region!</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList countries={filteredCountries}/>\r\n\t\t\t\t\t</Scroll>\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t);\t\t\t\t\t\t\r\n\t\t\t}\t\r\n}\t\r\n\r\nexport default App;\t\t\t\r\n\t\t\t\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}